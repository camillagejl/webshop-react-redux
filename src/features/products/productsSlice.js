import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import appleImg from '../../assets/apple.jpg';
import orangeImg from '../../assets/orange.jpg';
import pearImg from '../../assets/pear.jpg';
import strawberryImg from '../../assets/strawberry.jpg';

const initialState = {
    products: [
        {
            name: 'apple',
            img: appleImg,
            price: 2.50
        },
        {
            name: 'orange',
            img: orangeImg,
            price: 4
        },
        {
            name: 'pear',
            img: pearImg,
            price: 3.50
        },
        {
            name: 'strawberry',
            img: strawberryImg,
            price: 0.10
        }
],
    cart: {
        products: {
            apple: 7
        }
    }
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const productsSlice = createSlice({
    name: 'products',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        newProductInCart: (state, action) => {
            const dest = state.cart.products;
            const product = action.payload.product;
            const amount = action.payload.amount;

            dest[product] = amount;

            // dest.forEach(product => {
            //     for (const [key, value] of Object.entries(product)) {
            //         console.log(`${key}: ${value}`);
            //
            //         if (key === 'name' && value === product) {
            //             console.log("This exists");
            //         }
            //         else {
            //             console.log("Doesn't exist");
            //         }
            //     }
            // })
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //   builder
    //     .addCase(incrementAsync.pending, (state) => {
    //       state.status = 'loading';
    //     })
    //     .addCase(incrementAsync.fulfilled, (state, action) => {
    //       state.status = 'idle';
    //       state.value += action.payload;
    //     });
    // },
});

export const { newProductInCart } = productsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProducts = (state) => state.products.products;
export const selectCart = (state) => state.products.cart.products;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default productsSlice.reducer;
